{
  "name": "opensphere-app-example",
  "version": "1.0.0",
  "description": "A sample application that uses OpenSphere as a library.",
  "directories": {
    "scss": "scss",
    "views": "views"
  },
  "build": {
    "type": "app",
    "config": "config/settings.json",
    "index": "index.js",
    "scss": "scss/example.scss",
    "themes": [
      "overrides_default_compact",
      "overrides_slate_compact"
    ],
    "defineRoots": {
      "os.ROOT": "../opensphere/",
      "os.APP_ROOT": "./"
    },
    "gcc": {
      "define": [
        "os.SETTINGS=config/settings.json",
        "os.config.appNs='example'"
      ],
      "entry_point": [
        "goog:example"
      ],
      "hide_warnings_for": [
        "/opensphere/"
      ]
    },
    "moduleDefines": {
      "plugin.cesium.LIBRARY_BASE_PATH": "cesium/Build/CesiumUnminified"
    }
  },
  "scripts": {
    "build": "yarn run init && yarn run lint && yarn run modernizr && yarn run compile && yarn run copy && yarn run build:index",
    "build:debug": "yarn run init && yarn run modernizr && yarn run compile:resolve && yarn run compile:debugcss && yarn run build:debugindex",
    "build:index": "os-index ./index.js",
    "build:debugindex": "os-index --debug ./index.js",
    "compile:resolve": "os-resolve --outputDir .build --defineRoots $(cat .build/version)",
    "compile:css": "npm run compile:debugcss; npm run minify:css;",
    "compile:debugcss": "for i in $(ls .build/themes -1 | grep node-sass-args); do node-sass --source-map true -o .build/themes --output-style expanded $(cat .build/themes/$i) & pids=\"$pids $!\"; done; wait $pids; npm run postcompile:debugcss",
    "postcompile:debugcss": "for i in $(ls .build/themes -1 | grep combined.css | grep -v combined.css.map); do postcss .build/themes/$i --no-map -u autoprefixer -r & pids=\"$pids $!\"; done; wait $pids",
    "minify:css": "for i in $(ls .build/themes -1 | grep combined.css | grep -v combined.css.map); do cleancss --output .build/themes/$(echo $i | sed 's/combined/min/') .build/themes/$i & pids=\"$pids $!\"; done; wait $pids",
    "compile:gcc": "os-compile .build/gcc-args.json",
    "postcompile:gcc": "echo \"//# sourceMappingURL=`pwd`/.build/opensphere-app-example.min.map\" >> .build/opensphere-app-example.min.js",
    "compile": "yarn run compile:resolve && yarn run compile:gcc && yarn run compile:css && yarn run compile:debugcss",
    "precopy:files": "mkdirp $(cat .build/version)/styles && mkdirp $(cat .build/version)/styles/themes",
    "precopy:views": "mkdirp $(cat .build/version)/views",
    "precopy:config": "mkdirp dist/opensphere-app-example/config",
    "precopy:resources": "xargs -n 1 mkdir -p < .build/resources-copy-dirs",
    "copy:files": "cp .build/opensphere-app-example.min.js $(cat .build/version) && cp .build/themes/*.min.css $(cat .build/version)/styles/themes",
    "postcopy:files": "perl -pi -e 's#../opensphere/vendor/fonts#vendor/fonts#g' $(cat .build/version)/styles/themes/*",
    "copy:views": "xargs -n 1 -I @ sh -c 'cp -rf @ $(cat .build/version)/views/.' < .build/copy-views-args",
    "copy:config": "cp .build/settings.json dist/opensphere-app-example/config",
    "copy:resources": "xargs -n 2 cp -r < .build/resources-copy-files",
    "copy": "yarn run copy:files && yarn run copy:views && yarn run copy:config && yarn run copy:resources",
    "init:base": "rimraf .build dist && mkdirp .build dist/opensphere-app-example",
    "init:debug": "rimraf index.html",
    "init:version": "echo dist/opensphere-app-example/v$(date +%s) > .build/version",
    "init:vfolder": "mkdirp $(cat .build/version)",
    "init": "yarn run init:base && yarn run init:debug && yarn run init:version && yarn run init:vfolder",
    "lint:css": "sass-lint -c ../opensphere/.sass-lint.yml -v -s scss -i 'scss/nolint/**/*.scss' 'scss/**/*.scss'",
    "lint:js": "eslint --cache 'src/**/*.js'",
    "lint": "yarn run lint:js && yarn run lint:css",
    "modernizr": "modernizr -c modernizr.config.json -u -d .build/modernizr.js"
  },
  "keywords": [
    "opensphere",
    "geospatial",
    "geo",
    "closure"
  ],
  "author": "Kevin Schmidt <kschmidt@caci.com>",
  "license": "Apache-2.0",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/ngageoint/opensphere-app-example.git"
  },
  "bugs": {
    "url": "https://github.com/ngageoint/opensphere-app-example/issues"
  },
  "devDependencies": {
    "@commitlint/cli": "^8.0.0",
    "@commitlint/config-conventional": "^8.1.0",
    "@commitlint/travis-cli": "^8.1.0",
    "clean-css-cli": "^4.1.11",
    "eslint": "^6.0.0",
    "eslint-config-opensphere": "^4.0.0",
    "husky": "^3.0.1",
    "mkdirp": "^0.5.1",
    "node-sass": "^4.12.0",
    "opensphere-build-closure-helper": "^5.0.0",
    "opensphere-build-index": "^3.0.0",
    "opensphere-build-resolver": "^7.0.0",
    "postcss-cli": "^5.0.0",
    "rimraf": "^2.5.4",
    "sass-lint": "^1.12.1"
  },
  "dependencies": {
    "angular": "~1.7.x",
    "angular-animate": "~1.7.x",
    "angular-route": "~1.7.x",
    "angular-sanitize": "~1.7.x",
    "bootstrap": "4.5.0",
    "bootswatch": "4.5.0",
    "modernizr": "^3.8.0",
    "opensphere": "0.0.0-development"
  },
  "husky": {
    "hooks": {
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
    }
  }
}
