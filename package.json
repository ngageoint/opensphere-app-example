{
  "name": "opensphere-app-example",
  "version": "1.0.0",
  "description": "A sample application that uses OpenSphere as a library.",
  "directories": {
    "scss": "scss",
    "views": "views"
  },
  "build": {
    "type": "app",
    "config": "config/settings.json",
    "index": "index.js",
    "scss": "scss/example.scss",
    "themes": [
      "overrides_default_compact",
      "overrides_slate_compact"
    ],
    "defineRoots": {
      "os.ROOT": "../opensphere/",
      "os.APP_ROOT": "./"
    },
    "gcc": {
      "define": [
        "os.SETTINGS=config/settings.json",
        "os.config.appNs='example'"
      ],
      "entry_point": [
        "goog:ol.ext",
        "goog:exampleentry"
      ],
      "hide_warnings_for": [
        "/opensphere/"
      ]
    },
    "moduleDefines": {
      "plugin.cesium.LIBRARY_BASE_PATH": "cesium/Build/CesiumUnminified"
    }
  },
  "scripts": {
    "build": "npm-run-all -s init -p lint genlibs -s compile copy build:index",
    "build:index": "os-index ./index.js",
    "build:devindex": "os-index --debug ./index.js",
    "build:webpack": "webpack --mode production",
    "build:webpack-dev": "webpack --mode development",
    "compile": "npm-run-all -s compile:vendor-min compile:resolve gen:deps -p build:webpack compile:css",
    "compile:resolve": "os-resolve --outputDir .build --defineRoots $(cat .build/version)",
    "compile:css": "run-s compile:debugcss minify:css",
    "compile:debugcss": "for i in $(ls -1 .build/themes | grep node-sass-args); do node-sass --source-map true -o .build/themes --output-style expanded $(cat .build/themes/$i) & pids=\"$pids $!\"; done; wait $pids; npm run postcompile:debugcss",
    "postcompile:debugcss": "for i in $(ls -1 .build/themes | grep combined.css | grep -v combined.css.map); do postcss .build/themes/$i --no-map -u autoprefixer -r & pids=\"$pids $!\"; done; wait $pids",
    "compile:vendor-min": "node ../opensphere/vendor-min",
    "dev": "npm-run-all -s init genlibs compile:vendor-min compile:resolve gen:deps -p compile:debugcss build:webpack-dev build:devindex",
    "genlibs": "run-p gen:modernizr gen:xmllexer",
    "gen:deps": "os-gendeps .build/gcc-args.json .build/deps.js",
    "gen:modernizr": "modernizr -c modernizr.config.json -u -d .build/modernizr.js",
    "pregen:xmllexer": "echo \"window.xmlLexer = require('xml-lexer');\" > .build/xml-lexer.require.js",
    "gen:xmllexer": "browserify .build/xml-lexer.require.js -o .build/xml-lexer.min.js",
    "minify:css": "for i in $(ls .build/themes -1 | grep combined.css | grep -v combined.css.map); do cleancss --output .build/themes/$(echo $i | sed 's/combined/min/') .build/themes/$i & pids=\"$pids $!\"; done; wait $pids",
    "precopy:files": "mkdirp $(cat .build/version)/styles && mkdirp $(cat .build/version)/styles/themes",
    "precopy:views": "mkdirp $(cat .build/version)/views",
    "precopy:config": "mkdirp dist/opensphere-app-example/config",
    "precopy:resources": "xargs -n 1 mkdir -p < .build/resources-copy-dirs",
    "copy:files": "cp .build/opensphere-app-example.min.js $(cat .build/version) && cp .build/themes/*.min.css $(cat .build/version)/styles/themes && cp -r .build/themes/fonts $(cat .build/version)/styles/themes",
    "postcopy:files": "perl -pi -e 's#../opensphere/vendor/fonts#vendor/fonts#g' $(cat .build/version)/styles/themes/*",
    "copy:views": "xargs -n 1 -I @ sh -c 'cp -rf @ $(cat .build/version)/views/.' < .build/copy-views-args",
    "copy:config": "cp .build/settings.json dist/opensphere-app-example/config",
    "copy:resources": "xargs -n 2 cp -r < .build/resources-copy-files",
    "copy": "run-s copy:files copy:views copy:config copy:resources",
    "init:base": "rimraf .build dist && mkdirp .build dist/opensphere-app-example",
    "init:debug": "rimraf index.html",
    "init:version": "echo dist/opensphere-app-example/v$(date +%s) > .build/version",
    "init:vfolder": "mkdirp $(cat .build/version)",
    "init": "npm-run-all -p init:base init:debug -s init:version init:vfolder",
    "lint:css": "sass-lint -c ../opensphere/.sass-lint.yml -v -s scss -i 'scss/nolint/**/*.scss' 'scss/**/*.scss'",
    "lint:js": "eslint --cache 'src/**/*.js'",
    "lint": "run-p lint:js lint:css",
    "postinstall": "husky install"
  },
  "keywords": [
    "opensphere",
    "geospatial",
    "geo",
    "closure"
  ],
  "author": "Kevin Schmidt <kschmidt@caci.com>",
  "license": "Apache-2.0",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/ngageoint/opensphere-app-example.git"
  },
  "bugs": {
    "url": "https://github.com/ngageoint/opensphere-app-example/issues"
  },
  "devDependencies": {
    "@commitlint/cli": "^12.1.1",
    "@commitlint/config-conventional": "^12.1.1",
    "@ngageoint/closure-webpack-plugin": "^3.0.0",
    "clean-css-cli": "^4.1.11",
    "eslint": "^7.26.0",
    "eslint-config-opensphere": "^6.0.2",
    "husky": "^7.0.4",
    "mkdirp": "^1.0.4",
    "node-sass": "^4.12.0",
    "npm-run-all": "^4.1.5",
    "opensphere-build-closure-helper": "^7.0.0",
    "opensphere-build-index": "^4.0.0",
    "opensphere-build-resolver": "^10.0.0",
    "postcss": "^8.2.6",
    "postcss-cli": "^8.3.1",
    "rimraf": "^3.0.2",
    "sass-lint": "^1.12.1",
    "webpack": "^4.46.0",
    "webpack-cli": "^3.3.12"
  },
  "dependencies": {
    "angular": "~1.8.x",
    "angular-animate": "~1.8.x",
    "angular-route": "~1.8.x",
    "angular-sanitize": "~1.8.x",
    "bootstrap": "4.5.0",
    "bootswatch": "4.5.0",
    "modernizr": "^3.8.0",
    "opensphere": "0.0.0-development"
  }
}
